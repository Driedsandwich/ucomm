#!/usr/bin/env bash
set -euo pipefail

DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
. "$DIR/_common.sh"

usage() {
    echo "usage: login-clis <COMMAND> [ARGS...]"
    echo
    echo "Commands:"
    echo "  role <ROLE>   Handle CLI authentication for specified role"
    echo "                ROLE: boss|manager|s1|s2|s3"
    echo "  status        Show authentication status for all roles"
    echo
    echo "Authentication modes:"
    echo "- web mode: attempts login if test fails"
    echo "- api-key mode: skips (assumes manual token setup)"
    echo "- echo mode: skips (no auth needed)"
    exit 2
}

(( $# >= 1 )) || usage
COMMAND="$1"
shift

case "$COMMAND" in
    "role")
        (( $# >= 1 )) || usage
        ROLE="$1"
        # Validate role
        case "$ROLE" in
            boss|manager|s1|s2|s3) ;;
            *) echo "Error: Invalid role '$ROLE'"; usage ;;
        esac
        ;;
    "status")
        # Status command - will be handled below
        ;;
    *)
        echo "Error: Unknown command '$COMMAND'"
        usage
        ;;
esac

# Handle status command
if [[ "$COMMAND" == "status" ]]; then
    echo "=== Authentication Status ==="
    LOGIN_MODE="${LOGIN_MODE:-web}"
    echo "Mode: $LOGIN_MODE"
    echo
    
    for role in boss manager s1 s2 s3; do
        # Get role-specific TEST_CMD
        case "$role" in
            boss) TEST_CMD="${BOSS_TEST_CMD:-}" ;;
            manager) TEST_CMD="${MANAGER_TEST_CMD:-}" ;;
            s1) TEST_CMD="${S1_TEST_CMD:-}" ;;
            s2) TEST_CMD="${S2_TEST_CMD:-}" ;;
            s3) TEST_CMD="${S3_TEST_CMD:-}" ;;
        esac
        
        printf "%-8s: " "$role"
        
        if [[ -z "$TEST_CMD" ]]; then
            echo "SKIP (no TEST_CMD)"
        else
            if output=$($TEST_CMD 2>&1); then
                echo "OK - $TEST_CMD"
            else
                exit_code=$?
                error_line=$(echo "$output" | head -n1)
                echo "NG (exit $exit_code) - $TEST_CMD"
                [[ -n "$error_line" ]] && echo "         Error: $error_line"
            fi
        fi
    done
    exit 0
fi

# Handle role command
LOGIN_MODE="${LOGIN_MODE:-web}"

echo "[login-clis] Role: $ROLE, Mode: $LOGIN_MODE"

case "$LOGIN_MODE" in
    "echo")
        echo "[login-clis] Echo mode - no authentication needed"
        exit 0
        ;;
    "api-key")
        echo "[login-clis] API-key mode - assuming manual token setup"
        exit 0
        ;;
    "web")
        # Continue to web login flow
        ;;
    *)
        echo "[login-clis] Warning: Unknown LOGIN_MODE '$LOGIN_MODE', defaulting to web"
        ;;
esac

# Get role-specific commands
case "$ROLE" in
    boss)
        LOGIN_CMD="${BOSS_LOGIN_CMD:-}"
        TEST_CMD="${BOSS_TEST_CMD:-}"
        ;;
    manager)
        LOGIN_CMD="${MANAGER_LOGIN_CMD:-}"
        TEST_CMD="${MANAGER_TEST_CMD:-}"
        ;;
    s1)
        LOGIN_CMD="${S1_LOGIN_CMD:-}"
        TEST_CMD="${S1_TEST_CMD:-}"
        ;;
    s2)
        LOGIN_CMD="${S2_LOGIN_CMD:-}"
        TEST_CMD="${S2_TEST_CMD:-}"
        ;;
    s3)
        LOGIN_CMD="${S3_LOGIN_CMD:-}"
        TEST_CMD="${S3_TEST_CMD:-}"
        ;;
esac

# If no login command specified, skip
if [[ -z "$LOGIN_CMD" ]]; then
    echo "[login-clis] No login command specified for $ROLE - skipping authentication"
    exit 0
fi

# Test current authentication status
if [[ -n "$TEST_CMD" ]]; then
    echo "[login-clis] Testing authentication status..."
    if $TEST_CMD >/dev/null 2>&1; then
        echo "[login-clis] Already authenticated for $ROLE"
        exit 0
    else
        echo "[login-clis] Authentication required for $ROLE"
    fi
else
    echo "[login-clis] No test command - proceeding with login"
fi

# Perform web login
echo "[login-clis] Starting web authentication for $ROLE..."
echo "[login-clis] Command: $LOGIN_CMD"
echo "[login-clis] Follow the prompts in your browser"
echo

if $LOGIN_CMD; then
    echo
    echo "[login-clis] ✓ Authentication successful for $ROLE"
    
    # Verify with test command if available
    if [[ -n "$TEST_CMD" ]] && $TEST_CMD >/dev/null 2>&1; then
        echo "[login-clis] ✓ Authentication verified"
    fi
else
    echo
    echo "[login-clis] ✗ Authentication failed for $ROLE"
    echo "[login-clis] You can:"
    echo "  1. Re-run: $LOGIN_CMD"
    echo "  2. Set LOGIN_MODE=echo to skip authentication"
    echo "  3. Set LOGIN_MODE=api-key for manual token setup"
    exit 1
fi