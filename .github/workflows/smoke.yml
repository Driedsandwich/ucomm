name: smoke

on:
  push:
    branches: [ main ]
    paths:
      - ".github/workflows/smoke.yml"
      - "scripts/**"
      - "config/**"
      - "ucomm.sh"
      - "docs/**"
      - "package.json"
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      secure_mode:
        description: "SECURE_MODE (0=stub, 1=real)"
        required: true
        default: "0"
        type: choice
        options:
          - "0"
          - "1"
      run_capture:
        description: "Attach logs & diag artifacts"
        required: true
        default: "true"
        type: boolean

permissions:
  contents: read

concurrency:
  group: smoke-${{ github.ref }}
  cancel-in-progress: true

env:
  TZ: Asia/Tokyo
  UCOMM_SECURE_MODE: ${{ inputs.secure_mode || vars.UCOMM_SECURE_MODE || '0' }}

jobs:
  smoke:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install system deps
        run: |
          sudo apt-get update
          sudo apt-get install -y tmux jq curl xz-utils ca-certificates

      - name: Install yq v4 (static)
        run: |
          YQ_VER=v4.44.3
          curl -fsSL -o yq "https://github.com/mikefarah/yq/releases/download/${YQ_VER}/yq_linux_amd64"
          chmod +x yq && sudo mv yq /usr/local/bin/yq
          yq --version

      - name: Make scripts executable
        run: chmod +x ucomm.sh scripts/*.sh || true

      - name: Launch (SECURE_MODE=${{ env.UCOMM_SECURE_MODE }})
        id: launch
        run: |
          echo "SECURE_MODE=${UCOMM_SECURE_MODE}" >> "$GITHUB_OUTPUT"
          ./ucomm.sh start "${UCOMM_SECURE_MODE}" || true
          sleep 2

      - name: MCP Launch & Verify
        id: mcp
        run: |
          mkdir -p artifacts
          
          # Launch MCP with timeout
          echo "Launching MCP stub..."
          timeout 15s scripts/mcp-launch.sh start || echo "MCP launch completed/timed out"
          sleep 3
          
          # HTTP endpoint verification with retries
          echo "Verifying MCP endpoints..."
          
          # Test /ready endpoint with retries
          if curl -fsS http://127.0.0.1:39200/ready \
                  --max-time 5 --retry 3 --retry-delay 2 --retry-all-errors \
                  -o artifacts/mcp_ready.json 2>/dev/null; then
            echo "mcp_ready=ok" >> "$GITHUB_OUTPUT"
            echo "✓ MCP /ready: OK"
            cat artifacts/mcp_ready.json
          else
            echo "mcp_ready=failed" >> "$GITHUB_OUTPUT"
            echo "✗ MCP /ready: FAILED"
            echo '{"error":"endpoint_unreachable","timestamp":"'$(date -Iseconds)'"}' > artifacts/mcp_ready.json
          fi
          
          # Test /health endpoint with retries
          if curl -fsS http://127.0.0.1:39200/health \
                  --max-time 5 --retry 3 --retry-delay 2 --retry-all-errors \
                  -o artifacts/mcp_health.json 2>/dev/null; then
            echo "mcp_health=ok" >> "$GITHUB_OUTPUT"
            echo "✓ MCP /health: OK"
            cat artifacts/mcp_health.json
          else
            echo "mcp_health=failed" >> "$GITHUB_OUTPUT"
            echo "✗ MCP /health: FAILED"
            echo '{"error":"endpoint_unreachable","timestamp":"'$(date -Iseconds)'"}' > artifacts/mcp_health.json
          fi
          
          # Status summary
          scripts/mcp-launch.sh status || true

      - name: Health
        id: health
        run: |
          mkdir -p artifacts
          scripts/health.sh --json | tee artifacts/health.json
          st=$(jq -r '.summary.status // empty' artifacts/health.json)
          if [ -z "$st" ]; then st="unknown"; fi
          echo "health_status=$st" >> "$GITHUB_OUTPUT"
          if [ "$st" != "ok" ]; then
            echo "::warning::health status is '$st' (continuing for capture)"
          fi

      - name: Capture once (optional)
        if: ${{ fromJSON(inputs.run_capture || 'true') }}
        run: |
          scripts/capture.sh --once || true
          echo "MODE=$(yq -r '.modes.active' config/topology.yaml)" | tee artifacts/MODE

      - name: Collect tmux info
        run: |
          tmux list-windows  -a -F '#S:#I #{window_name} (#{window_panes} panes)' | tee artifacts/tmux_windows.txt
          tmux list-panes -t ucomm_Director:director   -F '#{pane_index} #{pane_title} :: #{pane_current_command}' | tee artifacts/tmux_director_panes.txt || true
          tmux list-panes -t ucomm_multiagent:team     -F '#{pane_index} #{pane_title} :: #{pane_current_command}' | tee artifacts/tmux_team_panes.txt || true
          cp config/topology.yaml artifacts/topology.yaml

      - name: Upload artifacts (logs + diag)
        uses: actions/upload-artifact@v4
        with:
          name: smoke-${{ github.run_id }}
          path: |
            artifacts/**
            logs/**

      - name: Step Summary
        run: |
          SEC="${UCOMM_SECURE_MODE:-0}"
          HEALTH=$(jq -r '.summary.status // "unknown"' artifacts/health.json)
          MCP_READY="${{ steps.mcp.outputs.mcp_ready }}"
          MCP_HEALTH="${{ steps.mcp.outputs.mcp_health }}"
          MCP_STATUS="down"
          if [ "$MCP_READY" = "ok" ] && [ "$MCP_HEALTH" = "ok" ]; then
            MCP_STATUS="up"
          fi
          {
            echo "## Smoke result"
            echo "- SECURE_MODE: **${SEC}**"
            echo "- Health: **${HEALTH}**"
            echo "- MCP: **${MCP_STATUS}** (/ready: ${MCP_READY}, /health: ${MCP_HEALTH})"
            echo "- Windows:"
            sed 's/^/  /' artifacts/tmux_windows.txt || true
            echo
            echo "### Artifacts"
            echo "- logs/ (captured)"
            echo "- artifacts/ (health.json, mcp_*.json, tmux_*.txt, topology.yaml, MODE)"
          } >> $GITHUB_STEP_SUMMARY

      - name: Teardown
        if: always()
        run: |
          scripts/mcp-launch.sh stop || true
          ./ucomm.sh stop || true
          tmux kill-server 2>/dev/null || true