name: CI Moving Average

on:
  schedule:
    # 毎日 00:30 UTC
    - cron: '30 0 * * *'
  workflow_call:
    inputs:
      since_days:
        description: '直近 何日分を見るか（デフォルト 14 日）'
        required: false
        type: string
        default: '14'

permissions:
  actions: read
  contents: read

# 実行を1本に整理（手動連打や定時発火の並走を防止）
concurrency:
  group: ci-mavg-${{ github.ref }}
  cancel-in-progress: true

jobs:
  compute-mavg:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    env:
      # workflow_call で来れば inputs.since_days、schedule等なら '14'
      DAYS: ${{ inputs.since_days || '14' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Prepare dirs
        shell: bash
        run: mkdir -p artifacts/ci

      - name: GitHub CLI auth status
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: gh auth status

      # 失敗時はプレースホルダを書いてジョブ継続（夜間の赤回避）
      - name: Compute 2-week moving average (tolerant)
        id: compute
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          set -Eeuo pipefail
          outfile="artifacts/ci/summary-$(date +%Y%m%d).json"
          if ! python scripts/ci/compute_2w_mavg.py \
                --since-days "${DAYS:-14}" \
                --output "$outfile"; then
            echo "::warning::compute_2w_mavg.py failed; writing placeholder summary and allowing job to succeed"
            printf '{"error":"compute_failed","at":"%s"}\n' "$(date -Iseconds)" > "$outfile"
            echo "fallback=1" >> "$GITHUB_OUTPUT"
          else
            echo "fallback=0" >> "$GITHUB_OUTPUT"
          fi
          echo "summary_file=$outfile" >> "$GITHUB_OUTPUT"
          ls -la artifacts/ci || true
          head -20 "$outfile" || true

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ci-mavg-${{ github.run_id }}
          path: artifacts/ci/**
          if-no-files-found: warn
          retention-days: 30

      - name: Step Summary (rich table)
        shell: bash
        env:
          FALLBACK: ${{ steps.compute.outputs.fallback }}
          SUMMARY_FILE_FROM_STEP: ${{ steps.compute.outputs.summary_file }}
        run: |
          if [ -n "${SUMMARY_FILE_FROM_STEP:-}" ] && [ -f "${SUMMARY_FILE_FROM_STEP}" ]; then
            summary_file="${SUMMARY_FILE_FROM_STEP}"
          elif ls artifacts/ci/summary-*.json >/dev/null 2>&1; then
            summary_file="$(ls artifacts/ci/summary-*.json | head -1)"
          else
            summary_file="artifacts/ci/summary.json"
          fi

          {
            python - "$summary_file" <<'PY'
import json, sys, os
p = sys.argv[1]
d = json.load(open(p, encoding="utf-8"))

w = d.get("window_days")
overall = d.get("overall", {})
by_os = d.get("by_os", {})

print("## CI Moving Average")
if w is not None:
    print(f"- Since days: {w}")
print(f"- Summary file: {p}")
print(f"- Fallback used: {os.environ.get('FALLBACK','N/A')}")
print()
print("### Overall")
print("| Success | Total | Rate |")
print("|---:|---:|---:|")
print(f"| {overall.get('success',0)} | {overall.get('total',0)} | {overall.get('success_rate',0)}% |")
print()
print("### By OS")
print("| OS | Success | Total | Rate |")
print("|---|---:|---:|---:|")
for os_name in ("ubuntu","macos","windows"):
    v = by_os.get(os_name)
    if isinstance(v, dict):
        print(f"| {os_name} | {v.get('success',0)} | {v.get('total',0)} | {v.get('success_rate',0)}% |")
print()
print("```json")
head = {k:d[k] for k in ["generated_at","window_days","overall"] if k in d}
print(json.dumps(head, indent=2, ensure_ascii=False))
print("```")
PY
          } >> "$GITHUB_STEP_SUMMARY"
