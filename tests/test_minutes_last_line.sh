#!/usr/bin/env bash
# tests/test_minutes_last_line.sh - Regression test for last-line handling
# Prevents regression of the "no trailing newline drops last line" bug
# Usage: ./tests/test_minutes_last_line.sh

set -euo pipefail

SCRIPT_DIR="$(dirname "${BASH_SOURCE[0]}")"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"

echo "=== Minutes Last-Line Regression Test ==="
echo "Testing both with and without trailing newlines"
echo ""

# Test variables
TEST_DATE="2025-09-01"
TEST_MODE="local"
LOG_DIR="$PROJECT_ROOT/logs/$TEST_MODE/$TEST_DATE"
REPORT_FILE="$PROJECT_ROOT/reports/minutes/$TEST_DATE/$TEST_MODE.md"

# Cleanup function
cleanup() {
    rm -rf "$LOG_DIR"
    rm -f "$REPORT_FILE"
}

# Test helper
assert_role_present() {
    local role="$1"
    local description="$2"
    
    if grep -q "$role" "$REPORT_FILE"; then
        echo "‚úì PASS: $description - $role found"
    else
        echo "‚úó FAIL: $description - $role missing"
        echo "Report content:"
        cat "$REPORT_FILE"
        exit 1
    fi
}

echo "--- Test 1: Input WITH trailing newlines ---"

# Clean start
cleanup
mkdir -p "$LOG_DIR"

# Create test data WITH trailing newlines (using cat with heredoc)
cat > "$LOG_DIR/session.log" << 'EOF'
2025-09-01 10:00:00	director	[#topic] „Éï„Çß„Éº„Ç∫5„Ç≠„ÉÉ„ÇØ„Ç™„Éï
2025-09-01 10:03:12	manager	Ê±∫ÂÆö: Link Check „ÇíÂøÖÈ†àÔºàPublicÊôÇ„ÅÆ„Åø enforceÔºâ
2025-09-01 10:05:00	specialist	TODO: minutes.sh „ÅÆÁ´†Á´ã„Å¶ÂÆüË£Ö„ÇíÈÄ≤„ÇÅ„Çã @alice
EOF

echo "Created test data with trailing newlines"

# Run minutes generation
cd "$PROJECT_ROOT"
./scripts/minutes.sh "$TEST_DATE" "$TEST_MODE" > /dev/null 2>&1

# Verify all roles present
assert_role_present "director" "With trailing newlines"
assert_role_present "manager" "With trailing newlines" 
assert_role_present "specialist" "With trailing newlines (should always work)"

echo ""
echo "--- Test 2: Input WITHOUT trailing newlines (CRITICAL) ---"

# Clean and setup for critical test
cleanup
mkdir -p "$LOG_DIR"

# Create test data WITHOUT trailing newlines (using printf, no final \n)
printf "2025-09-01 10:00:00\tdirector\t[#topic] „Éï„Çß„Éº„Ç∫5„Ç≠„ÉÉ„ÇØ„Ç™„Éï\n2025-09-01 10:03:12\tmanager\tÊ±∫ÂÆö: Link Check „ÇíÂøÖÈ†àÔºàPublicÊôÇ„ÅÆ„Åø enforceÔºâ\n2025-09-01 10:05:00\tspecialist\tTODO: minutes.sh „ÅÆÁ´†Á´ã„Å¶ÂÆüË£Ö„ÇíÈÄ≤„ÇÅ„Çã @alice" > "$LOG_DIR/session.log"

echo "Created test data WITHOUT trailing newlines"

# Verify the test setup (file should NOT end with newline)
if tail -c1 "$LOG_DIR/session.log" | grep -q '^$'; then
    echo "‚ö† WARNING: Test setup failed - file unexpectedly ends with newline"
    echo "This test may not be testing the critical case properly"
else
    echo "‚úì Confirmed: test data ends without trailing newline"
fi

# Run minutes generation (this is the critical test)
cd "$PROJECT_ROOT"
./scripts/minutes.sh "$TEST_DATE" "$TEST_MODE" > /dev/null 2>&1

# Verify all roles present (especially specialist as last line)
assert_role_present "director" "Without trailing newlines"
assert_role_present "manager" "Without trailing newlines"

# This is the critical assertion - specialist was the last line without \n
if grep -q "specialist" "$REPORT_FILE"; then
    echo "‚úÖ CRITICAL SUCCESS: specialist role captured despite no trailing newline"
    echo "   Last-line handling is working correctly"
else
    echo "‚ùå CRITICAL FAILURE: specialist role missing from no-newline input"
    echo "   This indicates the last-line bug has regressed"
    echo ""
    echo "Generated report content:"
    cat "$REPORT_FILE"
    echo ""
    echo "Input file hex dump (last 32 bytes):"
    if command -v xxd >/dev/null 2>&1; then
        xxd "$LOG_DIR/session.log" | tail -2
    elif command -v hexdump >/dev/null 2>&1; then
        hexdump -C "$LOG_DIR/session.log" | tail -2  
    else
        od -c "$LOG_DIR/session.log" | tail -2
    fi
    cleanup
    exit 1
fi

echo ""
echo "--- Test 3: Role Count Verification ---"

# Extract role counts from summary section
role_counts=$(grep -A5 "## Ê¶ÇË¶Å" "$REPORT_FILE" | grep -E "(director|manager|specialist).*entries")

echo "Role counts found:"
echo "$role_counts"

# Verify each role has exactly 1 entry
for role in director manager specialist; do
    if echo "$role_counts" | grep -q "$role: 1 entries"; then
        echo "‚úì $role: 1 entry (correct)"
    else
        echo "‚úó $role: count mismatch or missing"
        cleanup
        exit 1
    fi
done

# Verify total count
if grep -q "Total: 3 entries" "$REPORT_FILE"; then
    echo "‚úì Total: 3 entries (correct)"
else
    echo "‚úó Total count incorrect"
    cleanup
    exit 1
fi

echo ""
echo "üéâ ALL TESTS PASSED!"
echo "‚úÖ Minutes generation handles inputs with trailing newlines"  
echo "‚úÖ Minutes generation handles inputs WITHOUT trailing newlines"
echo "‚úÖ All three roles captured in both scenarios"
echo "‚úÖ Correct role counts in summary section"
echo ""
echo "Regression test completed successfully."

# Cleanup
cleanup
echo "Test files cleaned up."